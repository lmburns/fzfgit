#!/usr/bin/env zsh

0="${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}"
0="${${(M)0:#/*}:-$PWD/$0}"

# Desc: interactive menu to choose file/commit to edit
#
# @params
# Globals:
#   ${mydir}: current directory of the script
#   ${edit_type}: which type to edit, all files, modified files, commit
#   ${selected_commit}: selected commit to edit
#   ${selected_files}: arrays of selected file to edit
# Arguments:
#   -m|--modified: display modified file only
#   -c|--commit: edit commit using interactive rebase
#   -h|--help: show helpe message and exit

emulate -LR zsh
setopt warncreateglobal noshortloops

local mydir; mydir=${0:h:A}
builtin source ${mydir}/fgit_helper

function usage() {
  builtin print -P "\
%F{1}%BUsage%f%b:
  %F{2}fedit%f [%F{13}-h%f] [%F{13}-m%f] [%F{13}-c%f] ...

%F{11}Select%f files/commits through fzf and edit selected files/commits in EDITOR.

%F{4}Default%f: list all tracked dotfiles and edit the selected files.

%F{1}%BOptions%f%b:
  %F{13}-h%f, %F{13}--help%f      Show this help message and exit
  %F{13}-m%f, %F{13}--modified%f  Only list and edit selected modified files
  %F{13}-c%f, %F{13}--commit%f    List commit and edit the selected commit through interactive rebase"
}

local -a selected_files
local edit_type selected_commit
edit_type="all"

while (( $# )) {
  case "$1" in
    (-m|--modified) edit_type="modified"; shift  ;;
    (-c|--commit)   edit_type="commit";   shift  ;;
    (-h|--help)     usage;                exit 0 ;;
    (*)             print::error "Invalid option: $1" && { usage; exit 1 } ;;
  esac
}

if [[ "$edit_type" == commit ]]; then
  selected_commit=$(get_commit "select a commit to edit")
  [[ -z "$selected_commit" ]] && exit 1
  command git rebase -i "$selected_commit"~
else
  if [[ "$edit_type" = modified ]] {
    selected_files=( ${(@f)"$(get_modified_file 'select files to edit')"} )
  } else {
    selected_files=( ${(@f)"$(get_git_file 'select files to edit')"})
  }

  (( $#selected_files )) || exit 1
  exec "$EDITOR" "$selected_files[@]"
fi

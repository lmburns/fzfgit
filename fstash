#!/usr/bin/env zsh

0="${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}"
0="${${(M)0:#/*}:-$PWD/$0}"

# Desc: stash operation using fzf
#
# @params
# Globals:
#   ${mydir}: current dir of the script, source purpose
#   ${stash_command}: stash command, pop, apply or file/delete to stash file or delete stash
#   ${selected_files}: selected files to stash
#   ${selected_stash}: selected stash to apply
#   ${confirm}: user confirm status
# Arguments:
#   -h|--help: show help message
#   -s|--select: select individual files and stash
#   -d|--delete: delete selected stash
#   -p|--pop: use pop instead of apply on the selected stash

emulate -LR zsh
setopt warncreateglobal noshortloops

local mydir; mydir=${0:h:A}
builtin source ${mydir}/fgit_helper

function usage() {
  builtin print -P -- "\
%F{1}%BUsage%f%b: %F{2}fstash%f [%F{13}-h%f] [%F{13}-s%f] [%F{13}-d%f] [%F{13}-p%f] ...

View and manage stash interactively.

%F{4}Default%f: list all stashes and apply the selected stash.

%F{1}%BOptions%f%b:
  %F{13}-h%f, %F{13}--help%f    Show this help message and exit
  %F{13}-s%f, %F{13}--select%f  List modified files and stash the selected files
  %F{13}-d%f, %F{13}--delete%f  List all stashes and delete the selected stash from stash list
  %F{13}-p%f, %F{13}--pop%f     Use 'stash pop' instead of 'stash apply'"
}

local stash_command confirm
local -a selected_files selected_stash
stash_command="apply"

while (( $# )) {
  case "$1" in
    (-p|--pop)    stash_command="pop";    shift ;;
    (-s|--select) stash_command="select"; shift ;;
    (-d|--delete) stash_command="delete"; shift ;;
    (-y|--yes)    confirm="y";            shift ;;
    (-h|--help)   usage; exit 0  ;;
    (*)           print::error "Invalid option: $1" && { usage; exit 1 } ;;
  esac
}

local line

if [[ "$stash_command" == "select" ]]; then
  selected_files=( ${(@f)"$(get_modified_file "select files to add to a stash")"} )
  (( $#selected_files )) || exit 1
  command git stash -- "$selected_files[@]"
elif [[ "$stash_command" == "delete" ]]; then
  selected_stash=( ${(@f)"$(get_stash 'select stash to delete')"} )
  (( $#selected_stash )) || exit 1
  [[ -z "$confirm" ]] && \
    foreach line ("$selected_stash[@]") {
      print -P -- "(%F{3}dryrun%f) drop ${line}"
    }

  [[ -z "$confirm" ]] && confirm=$(get_confirmation)
  [[ "$confirm" != y ]] && exit 1

  foreach line ("$selected_stash[@]") {
    command git stash drop "${line}"
  }
else
  selected_stash=( ${(@f)"$(get_stash 'select stash to apply' 'true')"} )
  (( $#selected_stash )) || exit 1
  [[ -z "$confirm" ]] && print -P -- "(%F{3}dryrun%f) $stash_command $selected_stash"
  [[ -z "$confirm" ]] && confirm=$(get_confirmation)
  [[ "$confirm" != y ]] && exit 1
  command git stash "$stash_command" "$selected_stash"
fi

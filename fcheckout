#!/usr/bin/env zsh

0="${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}"
0="${${(M)0:#/*}:-$PWD/$0}"

# Desc: checkout files/commit/branches using fzf
#
# @params
# Globals:
#   ${mydir}: current directory of the script, used for imports
#   ${action_type}: what type of git commands to use (branch|select|commit|modified)
#   ${selected_branch}: selected_branch to switch
#   ${selected_files}: selected_files to checkout
#   ${selected_commit}: selected commit to checkout
#   ${confirm}: confirm status of the user
# Arguments:
#   -h|--help: show help message
#   -s|--select: search all files instead of just the modified files
#   -b|--branch: search branch and checkout branch
#   -c|--commit: search commit and checkout commit

emulate -LR zsh
setopt warncreateglobal noshortloops

local mydir; mydir=${0:h:A}
builtin source ${mydir}/fgit_helper

function usage() {
  builtin print -P -- "\
%F{1}%BUsage%f%b:
  %F{2}fcheckout%f [%F{13}-h%f] [%F{13}-s%f] [%F{13}-b%f] [%F{13}-c%f] [%F{13}-y%f] ...

%F{11}Select%f files/commit/branch through fzf and checkout the selected objects.
%F{11}Files%f: checkout version in %F{2}HEAD%f or in a specific commit (reset file content to commit).
%F{11}Branch%f: switch to the selected branch.
%F{11}Commit%f: switch to a specific commit.

%F{4}Default%f: list all modified files and reset selected files back to HEAD.

%F{1}%BOptions%f%b:
  %F{13}-h%f, %F{13}--help%f    Show this help message and exit
  %F{13}-s%f, %F{13}--select%f  List all tracked files and select a commit to checkout the selected files
  %F{13}-b%f, %F{13}--branch%f  List all branch and checkout/switch the selected branch
  %F{13}-c%f, %F{13}--commit%f  List all commits and checkout selected commit
  %F{13}-y%f, %F{13}--yes%f     Acknowledge all actions that will be taken and skip confirmation"
}

local -a selected_files
local action_type confirm selected_commit selected_branch
action_type="modified"

while (( $# )) {
  case "$1" in
    (-s|--select) action_type="select"; shift ;;
    (-b|--branch) action_type="branch"; shift ;;
    (-c|--commit) action_type="commit"; shift ;;
    (-y|--yes)    confirm="y";             shift ;;
    (-h|--help)   usage && exit 0 ;;
    (*)           print::error "Invalid option: $1" && { usage; exit 1 } ;;
  esac
}

if [[ "$action_type" = branch ]]; then
  # Checkout branch
  selected_branch=$(get_branch 'Select a branch to checkout')
  [[ -z "$selected_branch" ]] && exit 1
  command git checkout "${selected_branch}"

elif [[ "$action_type" = "commit" ]]; then
  # Checkout commit
  selected_commit=$(get_commit 'Select a commit to checkout')
  [[ -z "${selected_commit}" ]] && exit 1
  command git checkout "${selected_commit}"

elif [[ "$action_type" = modified ]]; then
  # Checkout modified file back to version in HEAD
  selected_files=( ${(@f)"$(get_modified_file 'select files to checkout version in HEAD')"} )
  (( $#selected_files )) || exit 1
  [[ -z "$confirm" ]] && \
    builtin print -P "(%F{3}dryrun%f) %F{2}git%f checkout --" "${selected_files[@]}"
  [[ -z "$confirm" ]] && confirm=$(get_confirmation "Confirm?")
  [[ "$confirm" != y ]] && exit 1
  command git checkout -- "$selected_files[@]"

elif [[ "$action_type" = select ]]; then
  # Checkout selected files to a selected commit
  selected_files=( ${(@f)"$(get_git_file 'select files to checkout to previous commit')"} )
  (( $#selected_files )) || exit 1
  # Continue select a commit and then checkout the file back to the selected commit
  selected_commit=$(get_commit 'select the target commit' "${selected_files[@]}")
  [[ -z "$selected_commit" ]] && exit 1
  [[ -z "$confirm" ]] && \
    builtin print -P "(%F{3}dryrun%f) %F{2}git%f checkout ${selected_commit} --" "${selected_files[@]}"
  [[ -z "$confirm" ]] && confirm=$(get_confirmation "Confirm?")
  [[ "$confirm" != y ]] && exit 0
  command git checkout "$selected_commit" "$selected_files[@]"
fi

#!/usr/bin/env zsh

0="${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}"
0="${${(M)0:#/*}:-$PWD/$0}"

# Desc: untrack selected files
#
# @params
# Globals:
#   ${mydir}: current dir of the script
#   ${track_type}: determine method to use for untrack, possible values: untrack, temp, resume
#   ${confirm}: user confirm status
#   ${selected_files}: arrays of user selected_files for operation

emulate -LR zsh
setopt warncreateglobal noshortloops

local mydir; mydir=${0:h:A}
builtin source ${mydir}/fgit_helper

function usage() {
  builtin print -P -- "\
%F{1}%BUsage%f%b: %F{2}funtrack%f [%F{13}-h%f] [%F{13}-t%f] [%F{13}-r%f] [%F{13}-y%f] ...

Untrack selected files from git.

%F{4}Default%f: list all tracked files and permanently untrack the selected files (using git rm --cached filename).

Files will be remove from index while keeping the file in your current system.
However, when your other computers pull down the changes, the untracked files will be deleted.
Make sure to run fbackup before pulling down the changes.

Alternatively use the %F{13}-t%f flag (using git update-index --assume-unchanged [path]) to temporarily
untrack a file but keeping the files when other computers pull down the changes.

%F{1}%BOptions%f%b:
  %F{13}-h%f, %F{13}--help%f     Show this help message and exit
  %F{13}-t%f, %F{13}--temp%f     List all tracked files and temporarily ignore changes of the selected files
  %F{13}-r%f, %F{13}--resume%f   List all tracked files and resume tracking changes of the selected files
  %F{13}-y%f, %F{13}--yes%f      Acknowledge all actions that will be taken and skip confirmation"
}

track_type="untrack"
typeset -a selected_files && selected_files=()
confirm=""

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -t|--temp) track_type="temp";      shift ;;
    -r|--resume) track_type="retrack"; shift ;;
    -y|--yes) confirm='y';             shift ;;
    -h|--help) usage && exit 0 ;;
    *) echo "Invalid option: $1" >&2 && usage && exit 1 ;;
  esac
done

while IFS= read -r line; do
  selected_files+=("${line}")
done < <(get_git_file "select files to untrack")
[[ "${#selected_files[@]}" -eq 0 ]] && exit 1

if [[ "${track_type}" == "temp" ]]; then
  [[ -z "${confirm}" ]] && echo "(dryrun) git update-index --assume-unchanged" "${selected_files[@]}"
  [[ -z "${confirm}" ]] && confirm=$(get_confirmation "Files will be temporarily stop being tracked for changes, continue?")
  [[ "${confirm}" != 'y' ]] && exit 1
  git update-index --assume-unchanged "${selected_files[@]}"
  echo -e " "
  echo "Selected files are temporarily untracked by git, use funtrack -r to continue tracking changes."
  echo "Although funtrack -t won't delete the files on other machines, it is not the recommended way to untrack files."
  echo "funtrack -t is using git update-index --assume-unchanged under the hood"
  echo "Please refer to git update-index official documentation for more details"
elif [[ "${track_type}" == "retrack" ]]; then
  [[ -z "${confirm}" ]] && echo "(dryrun) git update-index --no-assume-unchanged" "${selected_files[@]}"
  [[ -z "${confirm}" ]] && confirm=$(get_confirmation "Files will resume being tracked by git, continue?")
  [[ "${confirm}" != 'y' ]] && exit 1
  git update-index --no-assume-unchanged "${selected_files[@]}"
  echo " "
  echo "Selected files are being resumed for tracking by git."
  echo "Although funtrack -t won't delete the files on other machines, it is not the recommended way to untrack files."
  echo "funtrack -t is using git update-index --assume-unchanged under the hood"
  echo "Please refer to git update-index official documentation for more details"
else
  [[ -z "${confirm}" ]] && echo "(dryrun) git rm --cached" "${selected_files[@]}"
  [[ -z "${confirm}" ]] && confirm=$(get_confirmation "Untrack the selected files?")
  [[ "${confirm}" != 'y' ]] && exit 1
  git rm --cached "${selected_files[@]}"
  echo -e " "
  echo "Selected files are being untracked by git, make sure to run fbackup on your other systems."
  echo "When other systems pull down this change, selected files will be deleted on other systems."
  echo "This is the default behavior of git rm --cached."
  echo "Please refer to git rm official documentation for more details"
fi
